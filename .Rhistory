library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
t1<-Sys.time()
td_ll<-spark_read_csv(sc,
"td_ll",
"file:///c:/temp/output.txt",
header=FALSE,partition=4)
print(Sys.time()-t1)
t1<-Sys.time()
ts<-td_ll %>% filter(V1>0.99) %>% collect()
print(Sys.time()-t1)
ts
t1<-Sys.time()
td<-read.table("c:/temp/output.txt")
print(Sys.time()-t1)
t1<-Sys.time()
ts<-td %>% filter(V1>0.99) %>% collect()
print(Sys.time()-t1)
dim(td)
t1<-Sys.time()
td_ll<-spark_read_csv(sc,
"td_ll",
"file:///c:/temp/output.txt",
header=FALSE,partition=4)
print(Sys.time()-t1)
t1<-Sys.time()
ts<-td_ll %>% filter(V1>0.99) %>% collect()
print(Sys.time()-t1)
devtools::install_github("Paradigm4/SciDBR")
devtools::install_github("Paradigm4/SciDBR")
devtools::install_github("Paradigm4/SciDBR")
install.packages("curl")
devtools::install_github("Paradigm4/SciDBR")
library(MERRAbin)
binFile<-"c:/MERRA/testMERRALarge.bin"
mb<-MERRABin$new(file=binFile)
13000/100
4*13000/100
4*13000/100*570*360/3600
4*13000/100*570*360
155*4
155*4/60
10*560*360
10*560*360/60
600/24
600/24/7
2*365
2*365*40
2*365*40/3600
37*3.8
library(MERRAbin)
binFile<-"c:/MERRA/filejava/"
mb<-MERRABin$new(file=binFile,endian="big")
cc<-mb$getClosestTS(lon=14,lat=17)
binFile<-"d:/MERRA/filejava/"
mb<-MERRABin$new(file=binFile,endian="big")
cc<-mb$getClosestTS(lon=14,lat=17)
plot(cc,type="l")
remove.packages("MERRAbin", lib="~/R/win-library/3.3")
install.packages("githubinstall")
library(githubinstall)
install.packages("githubinstall")
install.packages("devtools")
install.packages("githubinstall")
library(githubinstall)
library(devtools)
gh_install_packages("MERRAbin")
?gh_install_packages
githubinstall("MERRAbin")
install_github("joph/MERRAbin")
0.32*365*37
0.32*365*37/3600
214000/8760
214000/8760/0.3
80/5
BASE_DIR<-("G:/Meine Ablage/LVA/PhD Lectures/MachineLearningCourse")
setwd(BASE_DIR)
source("scripts/windturbines/00_config.R")
COUNTRY<-"GLOBAL"
FILE_TURBINE_LOCATIONS<-get_param(COUNTRY,
"FILE_TURBINE_LOCATIONS")
wpd<-read_csv(FILE_TURBINE_LOCATIONS)
###select country###
COUNTRY<-"CN"
COUNTRY_ISO3<-"CHN"
windparks_country<-wpd %>%
filter(country==COUNTRY_ISO3 & fuel1 == "Wind") %>%
dplyr::select(name,latitude,longitude,commissioning_year)
#path<-get_param(COUNTRY,"PATH_RAW_IMAGES_ASSESSMENT")
#unlink(list.dirs(path),
#      recursive = TRUE)
#windparks_country1<-windparks_country[5:nrow(windparks_country),]
for(i in 671:nrow(windparks_country)){
w<-windparks_country[i,]
print(w$name)
system.time(doSinglePark(w$name,
w$latitude,
w$longitude,
RESOLUTION,
COUNTRY))
}
BASE_DIR<-("G:/Meine Ablage/LVA/PhD Lectures/MachineLearningCourse")
setwd(BASE_DIR)
source("scripts/windturbines/functions.R")
###belgium should work...
SOURCE<-"GOOGLE"
url_source<-function(x,y,z,SOURCE){
url<-""
if(SOURCE=="GOOGLE"){
url<-paste0("http://mt0.google.com/vt/lyrs=s&hl=en&x=",x,"&y=",y,"&z=",z,"")
}
if(SOURCE=="BASEMAP"){
url<-paste0("https://maps2.wien.gv.at/basemap/bmaporthofoto30cm/normal/google3857/",z,"/",y,"/",x,".jpeg")
}
if(SOURCE=="MAPBOX"){
url<-paste0("http://a.tiles.mapbox.com/v4/mapbox.satellite/",z,"/",x,"/",y,".jpg?access_token=pk.eyJ1Ijoiam9waCIsImEiOiJjanZnNXF0YXUwNDlkNDNvYzZnbXUzNnp6In0.RimB9gchYB7XlfyB5ACvXA")
}
return(url)
}
RESOLUTION<-19
COUNTRY_LIST<-c("CN","DE","FR","AT","BR","MIX","GLOBAL")
all_params<-list()
for(COUNTRY in COUNTRY_LIST){
FILTER_WINDTURBINES_KW<-1000
PATH_EXPERIMENT<-
paste0(SOURCE,
"/RESOLUTION",
RESOLUTION,
"/",
COUNTRY,
"/")
PATH_TURBINE_LOCATIONS<-paste0(
"data/turbineLocations",
"/",
COUNTRY,"/")
FILE_TURBINE_LOCATIONS<-paste0(
PATH_TURBINE_LOCATIONS,
"windturbineLocations.csv")
PATH_RAW_IMAGES_TURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/Turbines/")
PATH_RAW_IMAGES_NOTURBINES<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"raw/NoTurbines/")
PATH_RAW_IMAGES_TURBINES_MACHINE_CLASSIFIED<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"classified/Turbines/")
PATH_RAW_IMAGES_NOTURBINES_MACHINE_CLASSIFIED<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"classified/NoTurbines/")
PATH_RAW_IMAGES_ASSESSMENT<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"assessment/")
#PATH_RAW_IMAGES_ASSESSMENT_TURBINES<-paste0("data/aerialImages/",
#                                   PATH_EXPERIMENT,
#                                   "assessment/turbines/")
PATH_WINDPARK_LOCATIONS<-paste0(
"data/windParks",
"/",
COUNTRY,"/")
PATH_TEMP<-"data/temp/"
PATH_LOCAL_TEMP<-"c:/temp/"
PATH_QUALITYCHECK<-paste0(
"qualityCheck/",
PATH_EXPERIMENT)
FILE_QUALITY_CHECK<-paste0(
"qualityCheck/",
PATH_EXPERIMENT,
"qualityCheck.csv")
PATH_ML_IMAGES_TURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/Turbines/")
PATH_ML_IMAGES_TURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/Turbines/")
PATH_ML_IMAGES_TURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/Turbines/")
PATH_ML_IMAGES_NOTURBINES_TRAIN<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/train/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_VALIDATION<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/validation/NoTurbines/")
PATH_ML_IMAGES_NOTURBINES_TEST<-paste0("data/aerialImages/",
PATH_EXPERIMENT,
"keras/test/NoTurbines/")
PATH_OSM<-paste0("data/OSM/",COUNTRY)
dir.create("config",showWarnings = FALSE)
params<-data.frame(SOURCE,
RESOLUTION,
COUNTRY,
PATH_EXPERIMENT,
FILTER_WINDTURBINES_KW)
paths<-data.frame(
PATH_TURBINE_LOCATIONS,
PATH_RAW_IMAGES_TURBINES,
PATH_RAW_IMAGES_NOTURBINES,
PATH_WINDPARK_LOCATIONS,
PATH_TEMP,
PATH_LOCAL_TEMP,
PATH_ML_IMAGES_TURBINES_TRAIN,
PATH_ML_IMAGES_TURBINES_VALIDATION,
PATH_ML_IMAGES_TURBINES_TEST,
PATH_ML_IMAGES_NOTURBINES_TRAIN,
PATH_ML_IMAGES_NOTURBINES_VALIDATION,
PATH_ML_IMAGES_NOTURBINES_TEST,
PATH_QUALITYCHECK,
PATH_RAW_IMAGES_TURBINES_MACHINE_CLASSIFIED,
PATH_RAW_IMAGES_NOTURBINES_MACHINE_CLASSIFIED,
PATH_RAW_IMAGES_ASSESSMENT,
PATH_OSM
#,
#PATH_RAW_IMAGES_ASSESSMENT_TURBINES
)
sapply(unlist(paths),
function(x){
print(as.character(x))
dir.create(as.character(x),showWarnings=FALSE,recursive = TRUE)})
files<-data.frame(FILE_QUALITY_CHECK,
FILE_TURBINE_LOCATIONS)
####write config files
params<-data.frame(params,
paths,
files)
write_csv(params,paste0("config/params",COUNTRY,".csv"))
all_params[[COUNTRY]]<-params
}
CURRENT_COUNTRY<-"BR"
