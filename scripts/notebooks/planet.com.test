{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-03T11:58:00.917376Z",
     "start_time": "2019-10-03T11:58:00.914355Z"
    }
   },
   "outputs": [],
   "source": [
    "from planet import api\n",
    "\n",
    "client = api.ClientV1()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-03T12:00:42.588927Z",
     "start_time": "2019-10-03T12:00:33.729184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20191003_060643_0f3d\n",
      "\n",
      "20191003_060642_0f3d\n",
      "\n",
      "20191003_060641_0f3d\n",
      "\n",
      "20191003_060640_0f3d\n",
      "\n",
      "20191002_065922_1039\n",
      "\n",
      "20191002_065921_1039\n",
      "\n",
      "20191002_065920_1039\n",
      "\n",
      "20191002_060607_0f1a\n",
      "\n",
      "20191002_060606_0f1a\n",
      "\n",
      "20191002_070302_0f4e\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "47.8987877,16.9743541\n",
    "\n",
    "aoi = {\n",
    "  \"type\": \"Polygon\",\n",
    "  \"coordinates\": [\n",
    "    [\n",
    "      [47.5, 16.5],\n",
    "      [47.5, 17],\n",
    "      [48, 17],\n",
    "      [47, 16.5]\n",
    "    ]\n",
    "  ]\n",
    "}\n",
    "\n",
    "# build a filter for the AOI\n",
    "query = api.filters.and_filter(\n",
    "  api.filters.geom_filter(aoi)\n",
    ")\n",
    "# we are requesting PlanetScope 4 Band imagery\n",
    "item_types = ['PSScene4Band']\n",
    "request = api.filters.build_search_request(query, item_types)\n",
    "# this will cause an exception if there are any API related errors\n",
    "results = client.quick_search(request)\n",
    "\n",
    "# items_iter returns an iterator over API response pages\n",
    "for item in results.items_iter(10):\n",
    "  # each item is a GeoJSON feature\n",
    "  print('%s\\n' % item['id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-03T12:06:38.153674Z",
     "start_time": "2019-10-03T12:06:38.148958Z"
    }
   },
   "outputs": [],
   "source": [
    "import math\n",
    "def deg2num(lat_deg, lon_deg, zoom):\n",
    "  lat_rad = math.radians(lat_deg)\n",
    "  n = 2.0 ** zoom\n",
    "  xtile = int((lon_deg + 180.0) / 360.0 * n)\n",
    "  ytile = int((1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n)\n",
    "  return (xtile, ytile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-03T12:13:09.609896Z",
     "start_time": "2019-10-03T12:13:09.606453Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(17885, 11458)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#47°55'09.9\"N 16°56'51.0\"E\n",
    "\n",
    "deg2num(47.5,16.5,15)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:.conda-windturbine-identification]",
   "language": "python",
   "name": "conda-env-.conda-windturbine-identification-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
